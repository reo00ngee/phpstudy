<?php
// // 問題文
// あなたは PAIZA 遊園地で働くエンジニアです。あなたは今回、観覧車の稼働状況を確認するプログラムを実装することになりました。

// PAIZA 遊園地の観覧車には N 個のゴンドラがあります。N 個のゴンドラには 1 から N までの番号が時計回りの順で付与されており、番号が i のゴンドラには A_i 人まで乗ることができます (1 ≦ i ≦ N)。観覧車は、反時計回りに回転します。

// 開園後すぐに、M 組のグループが観覧車の待機列に並びました。先頭から i 番目のグループは B_i 人の人がいます (1 ≦ i ≦ M)。それぞれのグループの人は、次のように観覧車に乗ります。

// ・先頭のグループから順番に乗り場にあるゴンドラに乗車していく。
// ・今乗り場にあるゴンドラにグループ全員が乗れる場合、全員がそのゴンドラに乗る。
// ・今乗り場にあるゴンドラにグループ全員が乗れない場合、乗り場にあるゴンドラに乗車できる分の人だけが乗り、残りの人は次にくるゴンドラを待つ。
// ・乗り場にゴンドラ i があり、ゴンドラ i への乗車が完了した場合、次に乗り場にはゴンドラ i + 1 が到着する。(1 ≦ i ≦ N - 1)。ただし、ゴンドラ N の次にはゴンドラ 1 が到着するものとする。
// ・異なるグループの人が同じゴンドラに乗ることはないものとする。
// ・それぞれのゴンドラは 1 周すると乗り場に戻る。乗り場に戻った時点で、乗車していた客は全員降りる。

// 開園時点で、乗り場にはゴンドラ 1 が待機しているものとします。

// M 組目のグループの人が全員ゴンドラから降りたタイミングまでに、各ゴンドラが乗せた客の人数を求めるプログラムを作成してください。ただし、開園後すぐに待機列に並んだ M 組のグループ以外の利用者はいないものとします。

// 例えば入力例 1 の場合、次のようになります。
// 入力例 1 では 3 つのゴンドラがあり、それぞれのゴンドラが 5 人乗りのゴンドラになっています。また、現在観覧車には 3 組のグループが並んでいます。1 番目のグループには 6 人、2 番目のグループには 5 人、3 番目のグループには 3 人の人がいます。

// 入力は以下のフォーマットで与えられます。

// N M
// A_1
// A_2
// ...
// A_N
// B_1
// B_2
// ...
// B_M
// ・1 行目にそれぞれゴンドラの数とグループの数を表す整数 N, M がこの順で半角スペース区切りで与えられます。
// ・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、i 番目のゴンドラに乗車できる人数の制限を表す整数 A_i が与えられます。
// ・続く M 行のうちの i 行目 (1 ≦ i ≦ M) には、i 番目のグループの人数を表す整数 B_i が与えられます。
// ・入力は合計で N + M + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。

// 各ゴンドラに乗った人の合計数を以下の形式で出力してください。
// C_1
// C_2
// ...
// C_N
// ・期待する出力は N 行からなります。
// ・i 行目 (1 ≦ i ≦ N) にはそれぞれ i 番目のゴンドラに乗った人の合計数を表す整数 C_i を出力してください。
// ・N 行目の出力の最後に改行を入れ、余計な文字、空行を含んではいけません。

// 入力例2
// 4 6
// 4
// 2
// 4
// 2
// 9
// 3
// 5
// 7
// 1
// 3

// 出力例2
// 10
// 5
// 7
// 6

$single_lines = array();

$gondola = array();
$group = array();
while ($raw_lines = fgets(STDIN)) {
  $single_lines[] = $raw_lines;
}


$NM = explode(" ", $single_lines[0]);
$N = $NM[0];
$M = $NM[1];
$i = 1;

while ($i <= $N + $M) {
  if ($i <= $N) {
    $gondola[] = $single_lines[$i];
  } else {
    $group[] = $single_lines[$i];
  }
  $i++;
}

// 出力して格納がうまくいっているか確認
// echo $N . PHP_EOL;
// echo $M . PHP_EOL;
// foreach($A as $a){
//   echo $a;
// }
// foreach($B as $b){
//   echo $b;
// }

$j = 0;
$k = 0;
$C = array();
while ($k < $N) {
  $C[] = 0;
  $k++;
}
$k = 0;

while ($j < $M) {
  if ($group[$j] - $gondola[$k] > 0) {
    $C[$k] = $C[$k] + $gondola[$k];
    $group[$j] = $group[$j] - $gondola[$k];
  } else {
    $C[$k] = $C[$k] + $group[$j];
    $group[$j] = 0;
    $j++; // グループは条件付きでシフトさせる
  }

  $k++; // ゴンドラは無条件にシフトさせる
  if($k == $N) $k = 0;
}



foreach ($C as $c) {
  echo $c. PHP_EOL;
}